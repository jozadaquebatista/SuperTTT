[1,2,3]
[4,5,6]
[7,8,9]

[1,2,3], [4,5,6], [7,8,9]

possibilidades:

inline:

    // Same position
    [1,2,x], [4,5,x], [7,8,x]
    [1,x,3], [4,x,6], [7,x,9]
    [x,2,3], [x,5,6], [x,8,9]
    
    // Cross
    [x,2,3], [4,x,6], [7,8,x]
    [1,2,x], [4,x,6], [x,8,9]
    
    // Same row
    [x,x,x], [4,5,6], [7,8,9]
    [1,2,3], [x,x,x], [7,8,9]
    [1,2,3], [4,5,6], [x,x,x]

Quad:
    [x,2,3]  [x,x,x]
    [x,5,6]  [4,5,6]
    [x,8,9]  [7,8,9]

    [1,x,3]  [1,2,3]
    [4,x,6]  [x,x,x]
    [7,x,9]  [7,8,9]

    [1,2,x]  [1,2,3]
    [4,5,x]  [4,5,6]
    [7,8,x]  [x,x,x]

    [x,2,3]  [1,2,x]
    [4,x,6]  [4,x,6]
    [7,8,x]  [x,8,9]

      
      
      


tabela:

matriz[9];

matriz[0] = 'joao'; // verifica se está cheio ou vazio o espaço do vencedor
                    // se cheio, encerra partida e declara o vencedor
matriz[1] = 'x';
matriz[4] = 'x';
matriz[9] = 'x';



